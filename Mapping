#!/usr/bin/env python3

"""
    # {Kaixin Jia}
    # {student id}
    # {kaixinj@kth.se}
"""

# Python standard library
from math import cos, sin, atan2, fabs, sqrt

# Numpy
import numpy as np

# "Local version" of ROS messages
from local.geometry_msgs import PoseStamped, Quaternion
from local.sensor_msgs import LaserScan
from local.map_msgs import OccupancyGridUpdate

from grid_map import GridMap


class Mapping:
    def __init__(self, unknown_space, free_space, c_space, occupied_space,
                 radius, optional=None):
        self.unknown_space = unknown_space
        self.free_space = free_space
        self.c_space = c_space
        self.occupied_space = occupied_space
        self.allowed_values_in_map = {"self.unknown_space": self.unknown_space,
                                      "self.free_space": self.free_space,
                                      "self.c_space": self.c_space,
                                      "self.occupied_space": self.occupied_space}
        self.radius = radius
        self.__optional = optional

    def get_yaw(self, q):
        """Returns the Euler yaw from a quaternion.
        :type q: Quaternion
        """
        return atan2(2 * (q.w * q.z + q.x * q.y),
                     1 - 2 * (q.y * q.y + q.z * q.z))

    def raytrace(self, start, end):                # 光线追踪算法，用来判断起点到终点所有经过的网格
        """Returns all cells in the grid map that has been traversed
        from start to end, including start and excluding end.
        start = (x, y) grid map index
        end = (x, y) grid map index
        """
        (start_x, start_y) = start                # 起点的坐标
        (end_x, end_y) = end                      # 终点的坐标
        x = start_x                               # 追踪过程中当前网格的x坐标
        y = start_y                               # 追踪过程中当前的y坐标
        (dx, dy) = (fabs(end_x - start_x), fabs(end_y - start_y))    # dx 和 dy分别表示起点到终点 在x 方向上的和y方向上的绝对距离
        n = dx + dy                               # 总的步数，表示起点到终点所要经过的栅格数量 
        x_inc = 1                                 # 表示x和y方向上的增量，
        if end_x <= start_x:
            x_inc = -1
        y_inc = 1
        if end_y <= start_y:
            y_inc = -1
        error = dx - dy                          # 判断下一步是沿着x移动还是y移动
        dx *= 2
        dy *= 2

        traversed = []                           # 储存光线经过的所有列表
        for i in range(0, int(n)):               
            traversed.append((int(x), int(y)))

            if error > 0:
                x += x_inc
                error -= dy
            else:
                if error == 0:
                    traversed.append((int(x + x_inc), int(y)))
                y += y_inc
                error += dx

        return traversed

    def add_to_map(self, grid_map, x, y, value):
        """Adds value to index (x, y) in grid_map if index is in bounds.
        Returns weather (x, y) is inside grid_map or not.
        """
        if value not in self.allowed_values_in_map.values():       # 检查value值是否允许添加
            raise Exception("{0} is not an allowed value to be added to the map. "
                            .format(value) + "Allowed values are: {0}. "
                            .format(self.allowed_values_in_map.keys()) +
                            "Which can be found in the '__init__' function.")

        if self.is_in_bounds(grid_map, x, y):                     # 检查给定坐标是否在边境范围内
            grid_map[x, y] = value                                # 如果x，y在value内，将value值添加到x，y内
            return True
        return False

    def is_in_bounds(self, grid_map, x, y):                      # 检查x，y是否在边界内
        """Returns weather (x, y) is inside grid_map or not."""
        if x >= 0 and x < grid_map.get_width():
            if y >= 0 and y < grid_map.get_height():
                return True
        return False

    def update_map(self, grid_map, pose, scan):

        # Current yaw of the robot         # 机器人的朝向角
        robot_yaw = self.get_yaw(pose.pose.orientation)
        # The origin of the map [m, m, rad]. This is the real-world pose of the
        # cell (0,0) in the map.
        origin = grid_map.get_origin()
        # The map resolution [m/cell]                  # 地图的分辨率
        resolution = grid_map.get_resolution()
        ob_list = []
        x_ = []
        y_ = []

        # 得到机器人相对原点的位置
        rob_x = pose.pose.position.x - origin.position.x
        rob_y = pose.pose.position.y - origin.position.y

        for i in range(len(scan.ranges)):
            if scan.ranges[i] < scan.range_max and scan.ranges[i] > scan.range_min:
                k = scan.angle_min + i * scan.angle_increment     # 机器人激光雷达的旋转角度
                x = scan.ranges[i] * cos(k + robot_yaw) + rob_x
                y = scan.ranges[i] * sin(k + robot_yaw) + rob_y

                ob_x = int(x / resolution)                       # 转换为网格坐标
                ob_y = int(y / resolution)
                ob_list.append((ob_x,ob_y))
                x_.append(ob_x)
                y_.append(ob_y)

                begin_point = int((pose.pose.position.x - origin.position.x) / resolution)
                end_point = int((pose.pose.position.y - origin.position.y) / resolution)
                
                ways_list = self.raytrace([begin_point,end_point],[ob_x,ob_y])       # 找到避开障碍物的路径
                for road in ways_list:
                    road_x,road_y = road
                    self.add_to_map(grid_map, road_x, road_y, self.free_space)
        
        for ob in ob_list:
            x_1,y_1 = ob
            self.add_to_map(grid_map, x_1, y_1, self.occupied_space)

        """
        For C only!
        Fill in the update correctly below.
        """ 
        # Only get the part that has been updated
        update = OccupancyGridUpdate()
        # The minimum x index in 'grid_map' that has been updated
        update.x = min(x_)
        # The minimum y index in 'grid_map' that has been updated
        update.y = min(y_)
        # Maximum x index - minimum x index + 1
        update.width = max(x_) - min(x_) + 1
        # Maximum y index - minimum y index + 1
        update.height = max(y_) - min(y_) + 1
        # The map data inside the rectangle, in row-major order.
        update.data = []
        for h in range(update.height):
            for w in range(update.width):
                update.data.append(grid_map.__getitem__([h, w]))
        # Return the updated map together with only the
        # part of the map that has been updated
        return grid_map, update
    
    def inflate_map(self, grid_map):
        """For C only!
        Inflate the map with self.c_space assuming the robot
        has a radius of self.radius.
        
        Returns the inflated grid_map.

        Inflating the grid_map means that for each self.occupied_space
        you calculate and fill in self.c_space. Make sure to not overwrite
        something that you do not want to.


        You should use:
            self.c_space  # For C space (inflated space).
            self.radius   # To know how much to inflate.

            You can use the function add_to_map to be sure that you add
            values correctly to the map.

            You can use the function is_in_bounds to check if a coordinate
            is inside the map.

        :type grid_map: GridMap
        """


        """
        Fill in your solution here
        """
        long = grid_map.get_width()
        high = grid_map.get_height()
        r = self.radius
        for x1 in range(long):
            for y1 in range(high):
                if grid_map[x1, y1] == self.occupied_space:
                    x_0 = x1 - r
                    y_0 = y1 - r

                    for x2  in range(r + r + 1):
                        for y2 in range(r + r + 1):
                            x_e = x_0 + x2
                            y_e = y_0 + y2
                            if sqrt((x_e - x1)**2 + (y_e - y1)**2) <= r and grid_map[x_e,  y_e] != self.occupied_space:
                                self.add_to_map(grid_map, x_e, y_e, self.c_space)
        # Return the inflated map
        return grid_map
